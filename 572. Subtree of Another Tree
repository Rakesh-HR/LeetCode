/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSubtree(TreeNode root, TreeNode subRoot) {
        if(root==null && subRoot==null)
            return true;
        if(root==null || subRoot==null)
            return false;
        if(equals(root, subRoot))
            return true;
        return isSubtree(root.left,subRoot) || isSubtree(root.right,subRoot);
        // Queue<TreeNode> q= new LinkedList<>();
        // q.add(root);
        // while(!q.isEmpty()){
        //     TreeNode cur=q.poll();
        //     if(cur.val==subRoot.val && equals(cur,subRoot))
        //         return true;
        //     if(cur.left!=null)
        //         q.add(cur.left);
        //     if(cur.right!=null)
        //         q.add(cur.right);
        // }
        // return false;
    }
    public boolean equals(TreeNode l, TreeNode r) {
        if(l==null && r==null)
            return true;
        if(l==null || r==null)
            return false;
        if(l.val==r.val)
            return true && equals(l.left,r.left) && equals(l.right,r.right);
        return false;
    }
}
