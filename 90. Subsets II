class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        ArrayList <List<Integer>> list = new ArrayList<>();
        Arrays.sort(nums);
        find(nums, 0, list, new ArrayList<Integer>());
        return list;
    }
    /*
    public void find(int [] nums, int start, List<List<Integer>> list, List<Integer> tempList){
        if(!list.contains(tempList))
            list.add(new ArrayList(tempList));
        for(int i=start;i<nums.length;i++){
            tempList.add(nums[i]);
            find(nums,i+1,list,tempList);
            tempList.remove(tempList.size()-1);
        }
    }
    */
    public void find(int [] nums, int start, List<List<Integer>> list, List<Integer> tempList){
        list.add(new ArrayList(tempList));
        //System.out.println("l= "+list);
        for(int i=start;i<nums.length;i++){
            if(i>start&&nums[i]==nums[i-1]) continue;
            tempList.add(nums[i]); 
            //System.out.println("i= "+i+" start= "+start+" tl="+tempList);
            find(nums,i+1,list,tempList);
            //System.out.println("tempList.size()-1 "+tempList.size());
            tempList.remove(tempList.size()-1);
            //System.out.println("tl="+tempList);

        }
    }
}
