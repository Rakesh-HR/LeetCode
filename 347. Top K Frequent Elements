class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> hm= new HashMap<>();
        for(int num:nums){
            hm.merge(num,1,Integer::sum);
        }
       /* List<Map.Entry<Integer,Integer>> list= new ArrayList<>(hm.entrySet());
        Collections.sort(list,new Comparator<Map.Entry<Integer,Integer>> (){
            public int compare(Map.Entry<Integer,Integer> o1,Map.Entry<Integer,Integer> o2){
                return o2.getValue().compareTo(o1.getValue());
            }
        });

        int [] res = new int[k];     
        for(int i=0;i<k;i++){
            res[i]=list.get(i).getKey();
        }
        */

        List<Integer> list[] = new ArrayList[nums.length + 1];   
        for(Map.Entry<Integer, Integer> h:hm.entrySet()){
            if(list[h.getValue()]==null)
                list[h.getValue()]= new ArrayList<>();
            list[h.getValue()].add(h.getKey());
        }     
        int res[] = new int[k];
        int n=0;
        for(int i=nums.length;i>=0;i--){
            if(list[i]!=null){
                for(int j=0;j<list[i].size();j++){
                    if(n<k)
                        res[n++]=list[i].get(j);
                }
            }
        }
        return res;
    }
}
